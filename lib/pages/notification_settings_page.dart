// ignore_for_file: use_build_context_synchronously, deprecated_member_use

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../services/background_earthquake_service.dart';
import '../services/notification_service.dart';

class NotificationSettingsPage extends StatefulWidget {
  const NotificationSettingsPage({super.key});

  @override
  State<NotificationSettingsPage> createState() =>
      _NotificationSettingsPageState();
}

class _NotificationSettingsPageState extends State<NotificationSettingsPage> {
  bool _notificationsEnabled = false;
  double _minimumMagnitude = 1.0;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadSettings();
  }

  Future<void> _loadSettings() async {
    try {
      final enabled =
          await BackgroundEarthquakeService.areNotificationsEnabled();
      final magnitude = await BackgroundEarthquakeService.getMinimumMagnitude();

      setState(() {
        _notificationsEnabled = enabled;
        _minimumMagnitude = magnitude;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _updateNotificationSettings(bool enabled) async {
    if (enabled) {
      // Ä°lk olarak bildirim izni iste
      await NotificationService.requestPermission();
      final hasPermission = await NotificationService.areNotificationsEnabled();

      if (!hasPermission) {
        _showPermissionDialog();
        return;
      }

      // Pil optimizasyonu uyarÄ±sÄ± gÃ¶ster
      _showBatteryOptimizationDialog();
    }

    setState(() {
      _notificationsEnabled = enabled;
    });

    await BackgroundEarthquakeService.setNotificationsEnabled(enabled);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          enabled
              ? 'Deprem bildirimleri aÃ§Ä±ldÄ±. Arka plan servisi baÅŸlatÄ±lÄ±yor...'
              : 'Deprem bildirimleri kapatÄ±ldÄ±',
        ),
        backgroundColor: enabled ? Colors.green : Colors.orange,
        duration: Duration(seconds: enabled ? 4 : 2),
      ),
    );
  }

  Future<void> _updateMinimumMagnitude(double magnitude) async {
    setState(() {
      _minimumMagnitude = magnitude;
    });

    await BackgroundEarthquakeService.setMinimumMagnitude(magnitude);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          'Minimum bÃ¼yÃ¼klÃ¼k ${magnitude.toStringAsFixed(1)} olarak ayarlandÄ±',
        ),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _showPermissionDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Bildirim Ä°zni Gerekli'),
          content: const Text(
            'Deprem bildirimlerini alabilmek iÃ§in uygulama ayarlarÄ±ndan bildirim iznini aÃ§manÄ±z gerekiyor.',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Tamam'),
            ),
          ],
        );
      },
    );
  }

  void _showBatteryOptimizationDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('âš¡ Ã–nemli: Pil Optimizasyonu'),
          content: const Text(
            'Uygulama kapalÄ±yken deprem bildirimlerini alabilmek iÃ§in:\n\n'
            '1. Cihaz AyarlarÄ± â†’ Pil â†’ Uygulama optimizasyonu\n'
            '2. "Deprem Takip" uygulamasÄ±nÄ± bulun\n'
            '3. "Optimize etme" seÃ§eneÄŸini seÃ§in\n\n'
            'Bu iÅŸlem yapÄ±lmazsa bildirimlerin gecikmesi ya da hiÃ§ gelmemesi mÃ¼mkÃ¼ndÃ¼r.',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('AnladÄ±m'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _showBatteryOptimizationSteps();
              },
              child: const Text('NasÄ±l YapÄ±lÄ±r?'),
            ),
          ],
        );
      },
    );
  }

  void _showBatteryOptimizationSteps() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('ðŸ“± AdÄ±m AdÄ±m Rehber'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Samsung Cihazlar iÃ§in:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const Text(
                  'â€¢ Ayarlar â†’ Cihaz bakÄ±mÄ± â†’ Pil â†’ Uygulama gÃ¼Ã§ yÃ¶netimi\n'
                  'â€¢ "Deprem Takip" â†’ "Optimize edilmedi"\n\n',
                ),
                const Text(
                  'Xiaomi/MIUI iÃ§in:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const Text(
                  'â€¢ Ayarlar â†’ Uygulamalar â†’ Uygulama yÃ¶neticisi\n'
                  'â€¢ "Deprem Takip" â†’ Pil tasarrufu â†’ "KÄ±sÄ±tlama yok"\n\n',
                ),
                const Text(
                  'Huawei iÃ§in:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const Text(
                  'â€¢ Ayarlar â†’ Pil â†’ Uygulama baÅŸlatma\n'
                  'â€¢ "Deprem Takip" â†’ Manuel yÃ¶netim â†’ TÃ¼m seÃ§enekleri aÃ§Ä±n\n\n',
                ),
                const Text(
                  'Genel Android:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const Text(
                  'â€¢ Ayarlar â†’ Pil â†’ Pil optimizasyonu\n'
                  'â€¢ "Deprem Takip" â†’ "Optimize etme"',
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Tamam'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8FAFC),
      appBar: AppBar(
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Text(
          'Bildirim AyarlarÄ±',
          style: GoogleFonts.spaceGrotesk(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: const Color(0xFF1E293B),
          ),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, color: Color(0xFF1E293B)),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildSectionTitle('Bildirim Durumu'),
                  const SizedBox(height: 12),
                  _buildNotificationToggle(),
                  const SizedBox(height: 24),

                  _buildSectionTitle('Minimum Deprem BÃ¼yÃ¼klÃ¼ÄŸÃ¼'),
                  const SizedBox(height: 12),
                  _buildMagnitudeSettings(),
                  const SizedBox(height: 24),

                  _buildSectionTitle('Bildirim HakkÄ±nda'),
                  const SizedBox(height: 12),
                  _buildInfoCard(),
                  const SizedBox(height: 24),

                  _buildSectionTitle('Test Bildirimleri'),
                  const SizedBox(height: 12),
                  _buildTestButtons(),
                  const SizedBox(height: 24),

                  /*_buildSectionTitle('Debug & Kontrol'),
                  const SizedBox(height: 12),
                  _buildDebugButtons(),*/
                ],
              ),
            ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: GoogleFonts.spaceGrotesk(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: const Color(0xFF1E293B),
      ),
    );
  }

  Widget _buildNotificationToggle() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: _notificationsEnabled
                  ? Colors.green.withOpacity(0.1)
                  : Colors.grey.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              _notificationsEnabled
                  ? Icons.notifications_active
                  : Icons.notifications_off,
              color: _notificationsEnabled ? Colors.green : Colors.grey,
              size: 24,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Deprem Bildirimleri',
                  style: GoogleFonts.inter(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: const Color(0xFF1E293B),
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _notificationsEnabled
                      ? 'Aktif - Depremler iÃ§in bildirim alacaksÄ±nÄ±z'
                      : 'Pasif - Bildirim almayacaksÄ±nÄ±z',
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    color: const Color(0xFF64748B),
                  ),
                ),
              ],
            ),
          ),
          Switch(
            value: _notificationsEnabled,
            onChanged: _updateNotificationSettings,
            activeColor: Colors.green,
          ),
        ],
      ),
    );
  }

  Widget _buildMagnitudeSettings() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(Icons.tune, color: Colors.blue, size: 24),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Bildirim EÅŸiÄŸi',
                      style: GoogleFonts.inter(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: const Color(0xFF1E293B),
                      ),
                    ),
                    Text(
                      'Bu deÄŸerin Ã¼zerindeki depremler iÃ§in bildirim alÄ±n',
                      style: GoogleFonts.inter(
                        fontSize: 14,
                        color: const Color(0xFF64748B),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          Text(
            'Minimum BÃ¼yÃ¼klÃ¼k: ${_minimumMagnitude.toStringAsFixed(1)}',
            style: GoogleFonts.inter(
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: const Color(0xFF1E293B),
            ),
          ),
          const SizedBox(height: 12),
          SliderTheme(
            data: SliderTheme.of(context).copyWith(
              activeTrackColor: Colors.blue,
              inactiveTrackColor: Colors.blue.withOpacity(0.2),
              thumbColor: Colors.blue,
              overlayColor: Colors.blue.withOpacity(0.2),
              valueIndicatorColor: Colors.blue,
            ),
            child: Slider(
              value: _minimumMagnitude,
              min: 0.5,
              max: 5.0,
              divisions: 18,
              label: _minimumMagnitude.toStringAsFixed(1),
              onChanged: _notificationsEnabled
                  ? (value) => _updateMinimumMagnitude(value)
                  : null,
            ),
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                '0.5',
                style: GoogleFonts.inter(
                  fontSize: 12,
                  color: const Color(0xFF64748B),
                ),
              ),
              Text(
                '5.0',
                style: GoogleFonts.inter(
                  fontSize: 12,
                  color: const Color(0xFF64748B),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildInfoCard() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(
                  Icons.info_outline,
                  color: Colors.orange,
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              Text(
                'NasÄ±l Ã‡alÄ±ÅŸÄ±r?',
                style: GoogleFonts.inter(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: const Color(0xFF1E293B),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Text(
            'â€¢ Uygulama arka planda 15 dakikada bir deprem verilerini kontrol eder\n'
            'â€¢ BelirlediÄŸiniz minimum bÃ¼yÃ¼klÃ¼k ve Ã¼zerindeki depremler iÃ§in bildirim gÃ¶nderilir\n'
            'â€¢ 4.0 ve Ã¼zeri depremler iÃ§in her zaman Ã¶zel bildirim alÄ±rsÄ±nÄ±z\n'
            'â€¢ Uygulama kapalÄ±yken bile bildirimler gelir (pil optimizasyonu kapatÄ±lmalÄ±)\n'
            'â€¢ Cihaz yeniden baÅŸladÄ±ÄŸÄ±nda otomatik olarak tekrar Ã§alÄ±ÅŸmaya baÅŸlar',
            style: GoogleFonts.inter(
              fontSize: 14,
              color: const Color(0xFF64748B),
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTestButtons() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.purple.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(
                  Icons.science_outlined,
                  color: Colors.purple,
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              Text(
                'Test Bildirimleri',
                style: GoogleFonts.inter(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: const Color(0xFF1E293B),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Text(
            'FarklÄ± tÃ¼rdeki bildirim formatlarÄ±nÄ± test edin:',
            style: GoogleFonts.inter(
              fontSize: 14,
              color: const Color(0xFF64748B),
            ),
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _notificationsEnabled
                      ? _sendNormalTestNotification
                      : null,
                  icon: const Icon(Icons.notifications, size: 18),
                  label: const Text('Normal Deprem'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _notificationsEnabled
                      ? _sendCriticalTestNotification
                      : null,
                  icon: const Icon(Icons.warning, size: 18),
                  label: const Text('BÃ¼yÃ¼k Deprem'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _notificationsEnabled
                  ? _sendBasicTestNotification
                  : null,
              icon: const Icon(Icons.check_circle_outline, size: 18),
              label: const Text('Basit Test Bildirimi'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _sendBasicTestNotification() async {
    try {
      await NotificationService.showEarthquakeNotification(
        title: 'ðŸ§ª Test Bildirimi',
        body: 'Bu bir test bildirimidir. Deprem bildirimleri dÃ¼zgÃ¼n Ã§alÄ±ÅŸÄ±yor!',
        magnitude: 2.5,
        location: 'Test Konumu',
      );

      _showSuccessMessage('Basit test bildirimi gÃ¶nderildi!');
    } catch (e) {
      _showErrorMessage('Test bildirimi gÃ¶nderilemedi: $e');
    }
  }

  Future<void> _sendNormalTestNotification() async {
    try {
      await BackgroundEarthquakeService.sendTestNotification();
      _showSuccessMessage('Normal deprem test bildirimi gÃ¶nderildi!');
    } catch (e) {
      _showErrorMessage('Normal test bildirimi gÃ¶nderilemedi: $e');
    }
  }

  Future<void> _sendCriticalTestNotification() async {
    try {
      await BackgroundEarthquakeService.sendCriticalTestNotification();
      _showSuccessMessage('BÃ¼yÃ¼k deprem test bildirimi gÃ¶nderildi!');
    } catch (e) {
      _showErrorMessage('Kritik test bildirimi gÃ¶nderilemedi: $e');
    }
  }

  void _showSuccessMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    );
  }

  void _showErrorMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    );
  }

  /*Widget _buildDebugButtons() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(
                  Icons.bug_report,
                  color: Colors.orange,
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              Text(
                'Debug & Manuel Kontrol',
                style: GoogleFonts.inter(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: const Color(0xFF1E293B),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Text(
            'Arka plan servisini manuel olarak test edin:',
            style: GoogleFonts.inter(
              fontSize: 14,
              color: const Color(0xFF64748B),
            ),
          ),
          const SizedBox(height: 16),
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _notificationsEnabled
                  ? _manualEarthquakeCheck
                  : null,
              icon: const Icon(Icons.search, size: 18),
              label: const Text('Manuel Deprem KontrolÃ¼'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _notificationsEnabled
                      ? _restartBackgroundService
                      : null,
                  icon: const Icon(Icons.refresh, size: 18),
                  label: const Text('Servisi Yeniden BaÅŸlat'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _showDebugInfo,
                  icon: const Icon(Icons.info, size: 18),
                  label: const Text('Debug Bilgisi'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }*/

  /*Future<void> _manualEarthquakeCheck() async {
    try {
      _showSuccessMessage('Manuel kontrol baÅŸlatÄ±ldÄ±...');
      
      // Debug loglarÄ± console'da gÃ¶rÃ¼necek
      await BackgroundEarthquakeService.checkForNewEarthquakes();
      
      _showSuccessMessage('Manuel kontrol tamamlandÄ±! Debug loglarÄ±nÄ± console\'da kontrol edin.');
    } catch (e) {
      _showErrorMessage('Manuel kontrol hatasÄ±: $e');
    }
  }*/

  /*Future<void> _restartBackgroundService() async {
    try {
      // Ã–nce servisi durdur
      await BackgroundEarthquakeService.stopPeriodicCheck();
      
      // KÄ±sa bir bekleme
      await Future.delayed(const Duration(seconds: 2));
      
      // Tekrar baÅŸlat
      await BackgroundEarthquakeService.startPeriodicCheck();
      
      _showSuccessMessage('Arka plan servisi yeniden baÅŸlatÄ±ldÄ±!');
    } catch (e) {
      _showErrorMessage('Servis yeniden baÅŸlatÄ±lamadÄ±: $e');
    }
  }*/

  /*void _showDebugInfo() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Debug Bilgisi'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('â€¢ Bildirimler: ${_notificationsEnabled ? "AÃ§Ä±k" : "KapalÄ±"}'),
            Text('â€¢ Minimum bÃ¼yÃ¼klÃ¼k: ${_minimumMagnitude.toStringAsFixed(1)}'),
            const Text('â€¢ Kontrol aralÄ±ÄŸÄ±: 15 dakika'),
            const Text('â€¢ Debug loglarÄ± console\'da gÃ¶rÃ¼nÃ¼r'),
            const SizedBox(height: 16),
            const Text(
              'Sorun yaÅŸÄ±yorsanÄ±z:\n'
              '1. Test bildirimlerini deneyin\n'
              '2. Manuel kontrolÃ¼ Ã§alÄ±ÅŸtÄ±rÄ±n\n'
              '3. Servisi yeniden baÅŸlatÄ±n\n'
              '4. Cihaz ayarlarÄ±ndan pil optimizasyonunu kapatÄ±n',
              style: TextStyle(fontSize: 12),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Tamam'),
          ),
        ],
      ),
    );
  }*/
}
